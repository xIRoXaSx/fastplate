# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
# _____.___.  ___________________________
# \__  |   | /  _  \__    ___/\__    ___/
#  /   |   |/  /_\  \|    |     |    |
#  \____   /    |    \    |     |    |
#  / ______\____|__  /____|     |____|
#  \/              \/
# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~
#
# > What is this file used for?
#    This file is designed to run with grml to simplify various tasks.
#    Head over to https://github.com/ILizardNetwork/grml, get / compile and setup grml.
#    Afterwards you can use these tasks.
version: 3
project: yatt

env:
    VERSION:  v2.0.0
    BIN_NAME: yatt

    # Docker env vars.
    DOCKER_DIR: ${ROOT}/docker
    DOCKER_IMG_TAG_BUILD: golang:1.23.5-bookworm
    DOCKER_IMG_TAG: yatt:latest

    # Golang env vars.
    GOOS:   linux
    GOARCH: amd64

interpreter: sh
import:
    - ./script/docker.sh

commands:
    build:
        help: build the project locally
        exec: |
            mkdir -p bin
            CGO_ENABLED=0 go build -o="bin/${BIN_NAME}-${VERSION}" .
        commands:
            run:
                help: run the binary
                deps:
                    - build
                    - run

            docker:
                help: build the docker image
                exec: |
                    build_docker

            multi_arch:
                help: build via docker multi arch container
                exec: |
                    run_docker_multi_arch_build

    run:
        help: run the binary with the testdata as input
        exec: |
            cd "${ROOT}/internal/interpreter/"
            mkdir -p "interpret/out"
            TEST=test ${ROOT}/bin/${BIN_NAME}-${VERSION} \
                -in="testdata/interpret/in/rootfile.yaml" \
                -var="testdata/interpret/in/yatt.var" \
                -out="testdata/interpret/out/rootfile.yaml" \
                -indent

    test:
        help: run the go tests
        exec:
            run_docker_test

    bench:
        help: run benchmarks
        deps:
            - bench.interpreter
            - bench.writer
        commands:
            interpreter:
                help: benchmark the file interpretation
                exec: |
                    cd "${ROOT}/internal/interpreter"
                    go test \
                        -test.benchmem \
                        -test.bench="^\QBenchmarkFileInterpretation\E$" \
                        -run=^$github.com/xiroxasx/yatt/interpreter

            writer:
                help: benchmark the file interpretation with corresponding outputs
                exec: |
                    cd "${ROOT}/internal/interpreter"
                    go test \
                        -benchmem \
                        -bench="^\QBenchmarkFileWrites\E$" \
                        -run=^$github.com/xiroxasx/yatt/interpreter
